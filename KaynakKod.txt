#include <stdint.h>
#include <stdio.h>
#include "inc/tm4c123gh6pm.h"
#include <stdbool.h>;
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include <string.h>
#include <stdlib.h>
#include <inttypes.h>
#include <time.h>

#define BAUDRATE 600


#define LCDPORT                  GPIO_PORTB_BASE
#define LCDPORTENABLE    		SYSCTL_PERIPH_GPIOB
#define RS                               GPIO_PIN_0
#define E                                GPIO_PIN_1
#define D4                               GPIO_PIN_4
#define D5                               GPIO_PIN_5
#define D6                               GPIO_PIN_6
#define D7                               GPIO_PIN_7


int sayi1=0;
int sayi2=0;
int sayi3=0;
int sayi4=0;
int d25,d50,d1;
float tumPara,v;
float para=0;
float paraUstu=0;
float tutar=0;
int adet[10];
float fiyat1[10];
char tur[10][10];
int i,t=1,p=0;

int count[5]={0,0,0,0,0};
char urunler[200][10]={"20","20","10","1","su","30","50 Kurus","2","cay","20","1 TL","3","kahve","15","1.5 TL","4","cikolata","50","1.75 TL","5","biskuvi","100","2 TL"};


void init_port() {
	volatile unsigned long delay;
	SYSCTL_RCGC2_R |= SYSCTL_RCGC2_GPIOD; // Port Dnin saati aktifleþtir
	SYSCTL_RCGC2_R |= SYSCTL_RCGC2_GPIOC; // Port Cnin saati aktifleþtir
	SYSCTL_RCGC2_R |= SYSCTL_RCGC2_GPIOE; // Port Enin saati aktifleþtir

	delay = SYSCTL_RCGC2_R; // Gecikme

	GPIO_PORTD_AMSEL_R = 0x00; 		// D PORTU ANALOG KULLANIMINA KAPAT
	GPIO_PORTD_PCTL_R = 0x00000000;
	GPIO_PORTD_DIR_R = 0xB0;         // 0 1 2 3 6 INPUT
	GPIO_PORTD_AFSEL_R = 0x00;
	GPIO_PORTD_DEN_R =0xFF; 		// DÝJÝTAL KULLANIM AKTÝFLEÞTÝR


	GPIO_PORTC_AMSEL_R = 0x00; 		// C PORTU ANALOG KULLANIMINA KAPAT
	GPIO_PORTC_PCTL_R = 0x00000000;
	GPIO_PORTC_DIR_R = 0x8F;         // 4 5 6 INPUT
	GPIO_PORTC_AFSEL_R = 0x00;
	GPIO_PORTC_DEN_R =0xFF; 		// DÝJÝTAL KULLANIM AKTÝFLEÞTÝR

	GPIO_PORTE_AMSEL_R = 0x00; 		// E PORTU ANALOG KULLANIMINA KAPAT
	GPIO_PORTE_PCTL_R = 0x00000000;
	GPIO_PORTE_DIR_R = 0xC7; 		// 3 4 5 ÝNPUT
	GPIO_PORTE_AFSEL_R = 0x00;
	GPIO_PORTE_DEN_R =0xFF; 		// DÝJÝTAL KULLANIM AKTÝFLEÞTÝR


}

void init_portB()
{
	volatile unsigned long delay;
	SYSCTL_RCGC2_R |= 0x00000002;
	    delay = SYSCTL_RCGC2_R;
	    GPIO_PORTB_AMSEL_R &= ~0xFF; // ANALOG I/O KAPALI
	    GPIO_PORTB_PCTL_R &= ~0xFFFFFFFF;
	    GPIO_PORTB_DIR_R |= 0xFF;
	    GPIO_PORTB_AFSEL_R &= ~0xFF; // ALTERNATÝF FONKSÝYONLARI KAPALI
	    GPIO_PORTB_DEN_R |= 0xFF;
	    GPIO_PORTB_DR8R_R |= 0xFF;
}

void init_UARTstdio() {
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	GPIOPinConfigure(0x00000001);
	GPIOPinConfigure(0x00000401);
	GPIOPinTypeUART(0x40004000, 0x00000001 | 0x00000002);
	UARTConfigSetExpClk(0x40004000, SysCtlClockGet(), BAUDRATE,
                        	(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
                         	UART_CONFIG_PAR_NONE));
	UARTStdioConfig(0, BAUDRATE, SysCtlClockGet());
}



void okuma(void)
{
	const char *ayrac=" ,";
	int b=0;

		for(i=4;urunler[i]!=!'\0';i++)
		{
			if(strcmp(urunler[i],"su")==0)
			{
				int x=atoi(urunler[i+1]);
				adet[0]=x;
				char *kelime=strtok(urunler[i+2],ayrac);
				while(kelime!='\0')
				{

					if(p==0)
					{
						float y=atoi(kelime);
						fiyat1[0]=y;
						p=1;
					}
					else
					{
						strcpy(tur[0],kelime);
					}
					kelime=strtok('\0',ayrac);
				}
			}
			if(strcmp(urunler[i],"cay")==0)
			{
				int x=atoi(urunler[i+1]);
				adet[1]=x;
				char *kelime=strtok(urunler[i+2],ayrac);
				while(kelime!='\0')
				{
					if(p==0)
					{
						float y=atof(kelime);
						fiyat1[1]=y;
						p=1;
					}
					else
					{
						strcpy(tur[1],kelime);
					}
					kelime=strtok('\0',ayrac);
				}
			}
			if(strcmp(urunler[i],"kahve")==0)
			{
				int x=atoi(urunler[i+1]);
				adet[2]=x;
				char *kelime=strtok(urunler[i+2],ayrac);
				while(kelime!='\0')
				{
					if(p==0)
					{
						float y=atof(kelime);
						fiyat1[2]=y;
						p=1;
					}
					else
					{
						strcpy(tur[2],kelime);
					}
					kelime=strtok('\0',ayrac);
				}
			}
			if(strcmp(urunler[i],"cikolata")==0)
			{
				int x=atoi(urunler[i+1]);
				adet[3]=x;
				char *kelime=strtok(urunler[i+2],ayrac);
				while(kelime!='\0')
				{
					if(p==0)
					{
						float y=atof(kelime);
						fiyat1[3]=y;
						p=1;
					}
					else
					{
						strcpy(tur[3],kelime);
					}
					kelime=strtok('\0',ayrac);
				}
			}
			if(strcmp(urunler[i],"biskuvi")==0)
			{
				int x=atoi(urunler[i+1]);
				adet[4]=x;
				char *kelime=strtok(urunler[i+2],ayrac);
				while(kelime!='\0')
				{

					if(p==0)
					{
						float y=atof(kelime);
						fiyat1[4]=y;
						p=1;
					}
					else
					{
						strcpy(tur[4],kelime);
					}
					kelime=strtok('\0',ayrac);
				}
				break;
			}
			p=0;
		}
}

void hesapla(void)
{
	init_UARTstdio();
	d25=atoi(urunler[0]);
	d50=atoi(urunler[1]);
	d1=atoi(urunler[2]);

		paraUstu=para-tutar;

		while(paraUstu!=0.0 && t!=0)
		{
			if(tumPara<paraUstu)
			{
				t=0;
				UARTprintf("Kasada yeteri kadar para yok\n");
			}
			else if(paraUstu>=1.00 && d1!=0 )
			{
				v=(int)paraUstu/1;
				paraUstu-=(v*1.00);
				if(v<=d1)
				{
					d1=d1-v;
				}
				else if(v>d1)
				{
					v-=d1;
					d1=0;
					paraUstu+=(v*1.00);

				}
				else if(d1==0)
				{
					paraUstu+=(v*1.00);

				}
			}
			else if(paraUstu>=0.5 && d50!=0)
			{
				v=paraUstu/0.5;
				int a=(int)v;
				paraUstu-=(a*0.5);
				if(a<=d50)
				{
					d50=d50-a;
				}
				else if(v>d50)
				{
					v-=d50;
					d50=0;
					paraUstu+=(v*0.5);

				}
				else if(d50==0)
				{
					paraUstu+=(v*0.5);
				}
			}
			else if(paraUstu>=0.25 && d25!=0)
			{
				v=paraUstu/0.25;
				paraUstu-=(v*0.25);
				if(v<=d25)
				{
					d25=d25-v;
				}
				else if(v>d25)
				{
					v-=d25;
					d25=0;
					paraUstu+=(v*0.25);

				}
				else if(d25==0)
				{
					paraUstu+=(v*0.25);

				}
			}
			else if(para<tutar)
			{
				t=0;
			}
			else
			{
				t=0;
			}


		}
		t=1;
		paraUstu=para-tutar;
		while(paraUstu!=0.0 && t!=0)
		{
			if(tumPara<paraUstu)
			{
				t=0;
			}
			else if(paraUstu>=1.00 && d1!=0 )
			{
				v=(int)paraUstu/1;
				paraUstu-=(v*1.00);
				if(v<=d1)
				{
					d1=d1-v;
					UARTprintf("1 TL:%d\n",(int)v);


				}
				else if(v>d1)
				{
					v-=d1;
					UARTprintf("1 TL:%d\n",d1);
					d1=0;
					paraUstu+=(v*1.00);

				}
				else if(d1==0)
				{
					paraUstu+=(v*1.00);

				}
			}
			else if(paraUstu>=0.5 && d50!=0)
			{
				v=paraUstu/0.5;
				int a=(int)v;
				paraUstu-=(a*0.5);
				if(a<=d50)
				{
					d50=d50-a;
					UARTprintf("50 kurus:%d\n",a);
				}
				else if(v>d50)
				{
					v-=d50;
					UARTprintf("50 kurus:%d\n",d50);
					d50=0;
					paraUstu+=(v*0.5);

				}
				else if(d50==0)
				{
					paraUstu+=(v*0.5);

				}
			}
			else if(paraUstu>=0.25 && d25!=0)
			{
				v=paraUstu/0.25;
				paraUstu-=(v*0.25);
				if(v<=d25)
				{
					d25=d25-v;
					UARTprintf("25 kurus:%d\n",(int)v);

				}
				else if(v>d25)
				{
					v-=d25;
					UARTprintf("25 kurus:%d\n",d25);
					d25=0;
					paraUstu+=(v*0.25);

				}
				else if(d25==0)
				{
					paraUstu+=(v*0.25);

				}
			}
			else if(para<tutar)
			{
				t=0;
			}
			else
			{
				t=0;
			}

		}
}


void Lcd_init() {

        SysCtlPeripheralEnable(LCDPORTENABLE);
        GPIOPinTypeGPIOOutput(LCDPORT, 0xFF);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, RS,  0x00 );

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x30 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x30 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x30 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7,  0x20 );
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        Lcd_Temizle();
        Lcd_Putch(0x28,0);//fonksiyon secimi
        Lcd_Putch(0x06,0);//ekleme modu
        Lcd_Putch(0x80,0);//kursör konumu
        Lcd_Putch(0x0f,0);//kursörü kapat
        Lcd_Temizle();

}
void Lcd_Komut(unsigned char c) {

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (c & 0xf0) );
        GPIOPinWrite(LCDPORT, RS, 0x00);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(50000);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (c & 0x0f) << 4 );
        GPIOPinWrite(LCDPORT, RS, 0x00);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

}



void Lcd_Putch(unsigned char c,int type) {

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (c & 0xf0) );
        if(type==1)GPIOPinWrite(LCDPORT, RS, 0x01);
        else GPIOPinWrite(LCDPORT, RS, 0x00);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

        GPIOPinWrite(LCDPORT, D4 | D5 | D6 | D7, (c & 0x0f) << 4 );
        if(type==1)GPIOPinWrite(LCDPORT, RS, 0x01);
        else GPIOPinWrite(LCDPORT, RS, 0x00);
        GPIOPinWrite(LCDPORT, E, 0x02);
        SysCtlDelay(10);
        GPIOPinWrite(LCDPORT, E, 0x00);

        SysCtlDelay(50000);

}
void Lcd_Goto(char x, char y){
        if(x==1)
                Lcd_Putch(0x80+((y-1)%16),0);
        else
                Lcd_Putch(0xC0+((y-1)%16),0);
}

void Lcd_Temizle(void){
        Lcd_Putch(0x01,0);
        SysCtlDelay(10);
}

void Lcd_Puts( char* s){

        while(*s)
                Lcd_Putch(*s++,1);
}

void Led1(void){
	  volatile unsigned long delay;
	  SYSCTL_RCGC2_R |= 0x0000001;      // 1) activate clock for Port A
	  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
	                                    // 2) no need to unlock

	  GPIO_PORTA_PCTL_R &= ~0x00000F00; // 3) regular GPIO
	  GPIO_PORTA_AMSEL_R &= ~0x04;      // 4) disable analog function on PA2
	  GPIO_PORTA_DIR_R |= 0x04;         // 5) set direction to output
	  GPIO_PORTA_AFSEL_R &= ~0x04;      // 6) regular port function
	  GPIO_PORTA_DEN_R |= 0x04;         // 7) enable digital port
}
void Led2(void){
	  volatile unsigned long delay;
	  SYSCTL_RCGC2_R |= 0x0000001;      // 1) activate clock for Port A
	  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
	                                    // 2) no need to unlock

	  GPIO_PORTA_PCTL_R &= ~0x0000F000; // 3) regular GPIO
	  GPIO_PORTA_AMSEL_R &= ~0x08;      // 4) disable analog function on PA3
	  GPIO_PORTA_DIR_R |= 0x08;         // 5) set direction to output
	  GPIO_PORTA_AFSEL_R &= ~0x08;      // 6) regular port function
	  GPIO_PORTA_DEN_R |= 0x08;         // 7) enable digital port
}


int main(void){
	SysCtlClockSet(SYSCTL_SYSDIV_4 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
	init_UARTstdio();
	init_port();
	init_portB();
	Led1();
	Led2();
	int button1,button2,button3,button4,button5,button6,button7,button8,button9,button10,button11;
	int b=0;
	int countP[3]={0,0,0};
	int countU[5]={0,0,0,0,0};
	int random;
	int stok[5]={0,0,0,0,0};
	volatile unsigned long delay;
	Lcd_init();


	okuma();
	while(1)
	{
		button1=GPIO_PORTD_DATA_R & 0b00000001;
		button2=GPIO_PORTD_DATA_R & 0b00000010;
		button3=GPIO_PORTD_DATA_R & 0b00000100;
		button4=GPIO_PORTD_DATA_R & 0b00001000;
		button5=GPIO_PORTD_DATA_R & 0b01000000;
		button6=GPIO_PORTC_DATA_R & 0b00010000;
		button7=GPIO_PORTC_DATA_R & 0b00100000;
		button8=GPIO_PORTC_DATA_R & 0b01000000;
		button9=GPIO_PORTE_DATA_R & 0b00001000;
		button10=GPIO_PORTE_DATA_R & 0b00010000;
		button11=GPIO_PORTE_DATA_R & 0b00100000;

		if(button1==0)
		{
			SysCtlDelay(16000000/3);
			countP[0]+=1;
		}
		else if(button2==0)
		{
			SysCtlDelay(16000000/3);
			countP[1]+=1;

		}
		else if(button3==0)
		{
			SysCtlDelay(16000000/3);
			countP[2]+=1;
		}
		else if(button4==0)
		{
			SysCtlDelay(16000000/3);
			para=(countP[0]*0.25)+(countP[1]*0.50)+(countP[2]*1);
			UARTprintf("Atilan para:%d\n",(int)para);
		}


		if(button5==0)
		{
			SysCtlDelay(16000000/3);
			countU[0]+=1;
			stok[0]+=1;
		}
		else if(button6==0)
		{
			SysCtlDelay(16000000/3);
			countU[1]+=1;
			stok[1]+=1;

		}
		else if(button7==0)
		{
			SysCtlDelay(16000000/3);
			countU[2]+=1;
			stok[2]+=1;
		}
		else if(button8==0)
		{
			SysCtlDelay(16000000/3);
			countU[3]+=1;
			stok[3]+=1;
		}
		else if(button9==0)
		{
			SysCtlDelay(16000000/3);
			countU[4]+=1;
			stok[4]+=1;
		}
		else if(button10==0)
		{
			SysCtlDelay(16000000/3);
			tutar=(countU[0]*0.50)+(countU[1]*1)+(countU[2]*1.5)+(countU[3]*1.75)+(count[4]*2);
			UARTprintf("Tutar:%d\n",(int)tutar);
			srand(time(NULL));
			random=1+rand()%4;
			if(random==2)
			{
				GPIO_PORTA_DATA_R |= 0b00000100;
				para=0;

			}
			else
			{
				GPIO_PORTA_DATA_R |= 0b00001000;
				adet[0]-=stok[0];
				adet[1]-=stok[1];
				adet[2]-=stok[2];
				adet[3]-=stok[3];
				adet[4]-=stok[4];
				hesapla();
			}

		}

		if(button11==0)
		{
			SysCtlDelay(16000000/3);
			tutar=0;
		}



	}
}
s
